name: issue-add-to-parent-project

on:
  issues:
    types: 
      - edited
    labels:
      - 'type/question'
      
env:
  GITHUB_TOKEN: ${{ secrets.MIHAELA_PROJECTS_TOKEN }}
  ORGANIZATION: ${{ github.repository_owner }}
  REPO: ${{ github.event.repository.name }}
  PARENT_PROJECT: 313
  PARENT_PROJECT_NAME: 'Mihaela Parent Test Project'
    
jobs:
  add_to_parent_project:
    if: github.event.issue.number > 0
    runs-on: ubuntu-latest
    steps:
      - name: Check if issue is in one of the child projects
        run: |
          gh api graphql -f query='
            query($org: String!, $repo: String!) {
              repository(name: $repo, owner: $org) {
                issue (number: ${{ github.event.issue.number }}) {
                  projectItems(first:20) {
                    nodes {
                      project {
                        number,
                        title
                      },
                      fieldValueByName(name:"Status") {
                        ... on ProjectV2ItemFieldSingleSelectValue {
                          optionId
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f org=$ORGANIZATION -f repo=$REPO > projects_data.json
            
            echo 'PROJECTS='$(jq '.data.repository.issue.projectItems.nodes[]' projects_data.json) >> $GITHUB_ENV
            echo 'PROJ_NO='$(jq '.data.repository.issue.projectItems.nodes[] | select(.project.number==316 or .project.number==312) | .project.number' projects_data.json) >> $GITHUB_ENV
            echo 'PROJ_STATUS='$(jq -r '.data.repository.issue.projectItems.nodes[] | select(.project.number==316 or .project.number==312) | select(.fieldValueByName != null) | .fieldValueByName.name' projects_data.json) >> $GITHUB_ENV
      - name: Get parent project project data
        if: env.PROJ_NO
        run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectV2(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f org=$ORGANIZATION -F number=$PARENT_PROJECT > project_data.json

          echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
          echo 'TODO_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Todo") |.id' project_data.json) >> $GITHUB_ENV
          echo 'PROGRESS_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="In Progress") |.id' project_data.json) >> $GITHUB_ENV
          echo 'DONE_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Done") |.id' project_data.json) >> $GITHUB_ENV
      - name: Add issue to parent project
        if: env.PROJ_NO
        run: |
          item_id="$( gh api graphql -f query='
            mutation($project:ID!, $issue:ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $issue}) {
                item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f issue=${{ github.event.issue.node_id }} --jq '.data.addProjectV2ItemById.item.id')"
            # if item exists in project, no action taken and item_id is the existent item id
            echo 'ITEM_ID='$item_id >> $GITHUB_ENV
      - name: Set parent project status Done
        if: contains(env.PROJ_STATUS, 'Done')
        run: |
          echo 'OPTION_ID='${{ env.DONE_OPTION_ID }}
      - name: Set parent project status In Progress
        if: contains(env.PROJ_STATUS, 'In ') || contains(env.PROJ_STATUS, 'Blocked')
        run: |
          echo 'OPTION_ID='${{ env.PROGRESS_OPTION_ID }}
      - name: Set parent project status To do
        if: env.PROJ_STATUS && !contains(env.PROJ_STATUS, 'In ') && !contains(env.PROJ_STATUS, 'Block    ed') && ! contains(env.PROJ_STATUS, 'Done')
        run: |
          echo 'OPTION_ID='${{ env.TODO_OPTION_ID }}
      - name: Set issue status in parent project
        if: env.OPTION_ID
        run: |
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
            ) {
              set_status: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: { 
                  singleSelectOptionId: $status_value
                  }
              }) {
                projectV2Item {
                  id
                  }
              }
            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=$OPTION_ID --silent
